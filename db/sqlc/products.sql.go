// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: products.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
	"gopkg.in/guregu/null.v4"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO product (id_category, name, price, image, list_image, description, sold, status, sale)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9) RETURNING id, id_category, name, price, image, list_image, description, sold, status, sale, created_at, update_at
`

type CreateProductParams struct {
	IDCategory  uuid.UUID      `json:"id_category"`
	Name        string         `json:"name"`
	Price        null.Int `json:"price"`
	Image       null.String `json:"image"`
	ListImage   []string       `json:"list_image"`
	Description null.String `json:"description"`
	Sold         null.Int  `json:"sold"`
	Status       null.Int  `json:"status"`
	Sale         null.Int  `json:"sale"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.IDCategory,
		arg.Name,
		arg.Price,
		arg.Image,
		pq.Array(arg.ListImage),
		arg.Description,
		arg.Sold,
		arg.Status,
		arg.Sale,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.IDCategory,
		&i.Name,
		&i.Price,
		&i.Image,
		pq.Array(&i.ListImage),
		&i.Description,
		&i.Sold,
		&i.Status,
		&i.Sale,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :one

DELETE
FROM product
WHERE id = $1 RETURNING id, id_category, name, price, image, list_image, description, sold, status, sale, created_at, update_at
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, deleteProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.IDCategory,
		&i.Name,
		&i.Price,
		&i.Image,
		pq.Array(&i.ListImage),
		&i.Description,
		&i.Sold,
		&i.Status,
		&i.Sale,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const getAllProduct = `-- name: GetAllProduct :many

SELECT id, id_category, name, price, image, list_image, description, sold, status, sale, created_at, update_at
FROM product
ORDER BY id
`

func (q *Queries) GetAllProduct(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProduct)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.IDCategory,
			&i.Name,
			&i.Price,
			&i.Image,
			pq.Array(&i.ListImage),
			&i.Description,
			&i.Sold,
			&i.Status,
			&i.Sale,
			&i.CreatedAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}


const getAllProductPopulate = `-- name: GetAllProduct :many

SELECT  product.id, product.id_category, product.name, product.price, product.image, product.list_image, product.description, product.sold, product.status, product.sale, product.created_at, product.update_at
FROM  product
LEFT JOIN category ON product.id_category = category.id;
`

func (q *Queries) GetAllProductPopulate(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProduct)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.IDCategory,
			&i.Name,
			&i.Price,
			&i.Image,
			pq.Array(&i.ListImage),
			&i.Description,
			&i.Sold,
			&i.Status,
			&i.Sale,
			&i.CreatedAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}


const getProductById = `-- name: GetProductById :one
SELECT id, id_category, name, price, image, list_image, description, sold, status, sale, created_at, update_at FROM product
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProductById(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.IDCategory,
		&i.Name,
		&i.Price,
		&i.Image,
		pq.Array(&i.ListImage),
		&i.Description,
		&i.Sold,
		&i.Status,
		&i.Sale,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const getProductWithCategory = `-- name: GetProductWithCategory :many

SELECT product.id,  product.id_category, product.name, product.price, product.image, product.list_image, product.description, product.sold, product.status, product.sale, product.created_at, product.update_at
FROM  product
INNER JOIN category ON product.id_category = category.id
WHERE product.id = $1
ORDER BY product.id
LIMIT $2
OFFSET $3
`

type GetProductWithCategoryParams struct {
	ID     uuid.UUID `json:"id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) GetProductWithCategory(ctx context.Context, arg GetProductWithCategoryParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductWithCategory, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.IDCategory,
			&i.Name,
			&i.Price,
			&i.Image,
			pq.Array(&i.ListImage),
			&i.Description,
			&i.Sold,
			&i.Status,
			&i.Sale,
			&i.CreatedAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProduct = `-- name: ListProduct :many

SELECT id, id_category, name, price, image, list_image, description, sold, status, sale, created_at, update_at
FROM product
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProductParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProduct(ctx context.Context, arg ListProductParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProduct, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.IDCategory,
			&i.Name,
			&i.Price,
			&i.Image,
			pq.Array(&i.ListImage),
			&i.Description,
			&i.Sold,
			&i.Status,
			&i.Sale,
			&i.CreatedAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one

UPDATE product
set id_category = $2, name = $3, price = $4, image = $5, list_image = $6, description = $7, sold = $8, status= $9, sale=$10
WHERE id = $1 RETURNING id, id_category, name, price, image, list_image, description, sold, status, sale, created_at, update_at
`

type UpdateProductParams struct {
	ID          uuid.UUID      `json:"id"`
	IDCategory  uuid.UUID      `json:"id_category"`
	Name        string         `json:"name"`
	Price        null.Int `json:"price"`
	Image       sql.NullString `json:"image"`
	ListImage   []string       `json:"list_image"`
	Description sql.NullString `json:"description"`
	Sold         null.Int  `json:"sold"`
	Status       null.Int  `json:"status"`
	Sale         null.Int  `json:"sale"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.ID,
		arg.IDCategory,
		arg.Name,
		arg.Price,
		arg.Image,
		pq.Array(arg.ListImage),
		arg.Description,
		arg.Sold,
		arg.Status,
		arg.Sale,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.IDCategory,
		&i.Name,
		&i.Price,
		&i.Image,
		pq.Array(&i.ListImage),
		&i.Description,
		&i.Sold,
		&i.Status,
		&i.Sale,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}
