// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: order.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createOrder = `-- name: CreateOrder :one

INSERT INTO "order" ( id_transaction,
        id_product,
        amount,
        data,
        status,
        qty)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6) RETURNING id, id_transaction, id_product, amount, data, status, qty, created_at, update_at
`

type CreateOrderParams struct {
	IDTransaction uuid.UUID      `json:"id_transaction"`
	IDProduct     uuid.UUID      `json:"id_product"`
	Amount        sql.NullInt64  `json:"amount"`
	Data          sql.NullString `json:"data"`
	Status        sql.NullInt32  `json:"status"`
	Qty           sql.NullInt32  `json:"qty"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.IDTransaction,
		arg.IDProduct,
		arg.Amount,
		arg.Data,
		arg.Status,
		arg.Qty,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.IDTransaction,
		&i.IDProduct,
		&i.Amount,
		&i.Data,
		&i.Status,
		&i.Qty,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :one

DELETE
FROM "order"
WHERE id = $1 RETURNING id, id_transaction, id_product, amount, data, status, qty, created_at, update_at
`

func (q *Queries) DeleteOrder(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRowContext(ctx, deleteOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.IDTransaction,
		&i.IDProduct,
		&i.Amount,
		&i.Data,
		&i.Status,
		&i.Qty,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const getOrderById = `-- name: GetOrderById :one

SELECT id, id_transaction, id_product, amount, data, status, qty, created_at, update_at
FROM
"order"
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetOrderById(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderById, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.IDTransaction,
		&i.IDProduct,
		&i.Amount,
		&i.Data,
		&i.Status,
		&i.Qty,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const listOrder = `-- name: ListOrder :many

SELECT id, id_transaction, id_product, amount, data, status, qty, created_at, update_at
FROM
"order"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListOrderParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrder(ctx context.Context, arg ListOrderParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrder, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.IDTransaction,
			&i.IDProduct,
			&i.Amount,
			&i.Data,
			&i.Status,
			&i.Qty,
			&i.CreatedAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one

UPDATE "order" set id_transaction = $2,
    id_product = $3,
    amount = $4,
    data =$5,
          status=$6,
          qty=$7
WHERE id = $1 RETURNING id, id_transaction, id_product, amount, data, status, qty, created_at, update_at
`

type UpdateOrderParams struct {
	ID            uuid.UUID      `json:"id"`
	IDTransaction uuid.UUID      `json:"id_transaction"`
	IDProduct     uuid.UUID      `json:"id_product"`
	Amount        sql.NullInt64  `json:"amount"`
	Data          sql.NullString `json:"data"`
	Status        sql.NullInt32  `json:"status"`
	Qty           sql.NullInt32  `json:"qty"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrder,
		arg.ID,
		arg.IDTransaction,
		arg.IDProduct,
		arg.Amount,
		arg.Data,
		arg.Status,
		arg.Qty,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.IDTransaction,
		&i.IDProduct,
		&i.Amount,
		&i.Data,
		&i.Status,
		&i.Qty,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}
