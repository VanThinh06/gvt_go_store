// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO "user" (
                   email,
                   type_user,
                   password)
VALUES ($1,
        $2,
        $3) RETURNING id, name, address, phone, email, type_user, password, payment, payment_info, payment_number, created_at, update_at
`

type CreateAccountParams struct {
	Email    string `json:"email"`
	TypeUser Type   `json:"type_user"`
	Password string `json:"password"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Email, arg.TypeUser, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Phone,
		&i.Email,
		&i.TypeUser,
		&i.Password,
		&i.Payment,
		&i.PaymentInfo,
		&i.PaymentNumber,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (name,
                   address,
                   phone,
                   email,
                   type_user,
                   password,
                   payment,
                   payment_info,
                   payment_number)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9) RETURNING id, name, address, phone, email, type_user, password, payment, payment_info, payment_number, created_at, update_at
`

type CreateUserParams struct {
	Name          sql.NullString `json:"name"`
	Address       sql.NullString `json:"address"`
	Phone         sql.NullString `json:"phone"`
	Email         string         `json:"email"`
	TypeUser      Type           `json:"type_user"`
	Password      string         `json:"password"`
	Payment       sql.NullString `json:"payment"`
	PaymentInfo   sql.NullString `json:"payment_info"`
	PaymentNumber sql.NullString `json:"payment_number"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Address,
		arg.Phone,
		arg.Email,
		arg.TypeUser,
		arg.Password,
		arg.Payment,
		arg.PaymentInfo,
		arg.PaymentNumber,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Phone,
		&i.Email,
		&i.TypeUser,
		&i.Password,
		&i.Payment,
		&i.PaymentInfo,
		&i.PaymentNumber,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one

DELETE
FROM "user"
WHERE id = $1 RETURNING id, name, address, phone, email, type_user, password, payment, payment_info, payment_number, created_at, update_at
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Phone,
		&i.Email,
		&i.TypeUser,
		&i.Password,
		&i.Payment,
		&i.PaymentInfo,
		&i.PaymentNumber,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, address, phone, email, type_user, password, payment, payment_info, payment_number, created_at, update_at FROM "user"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Phone,
		&i.Email,
		&i.TypeUser,
		&i.Password,
		&i.Payment,
		&i.PaymentInfo,
		&i.PaymentNumber,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const signIn = `-- name: GetUserSingIn :one

SELECT *
FROM "user"
WHERE email = $1 
LIMIT 1
`
type Login struct {
	Email          string `json:"email"`
	// Password       string `json:"password"`
	// TypeUser       Type `json:"type_user"`
}

func (q *Queries) First(ctx context.Context, arg Login) (User, error) {
	row := q.db.QueryRowContext(ctx, signIn,   arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Phone,
		&i.Email,
		&i.TypeUser,
		&i.Password,
		&i.Payment,
		&i.PaymentInfo,
		&i.PaymentNumber,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const listUser = `-- name: ListUser :many

SELECT id, name, address, phone, email, type_user, password, payment, payment_info, payment_number, created_at, update_at
FROM "user"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUserParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUser(ctx context.Context, arg ListUserParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUser, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Phone,
			&i.Email,
			&i.TypeUser,
			&i.Password,
			&i.Payment,
			&i.PaymentInfo,
			&i.PaymentNumber,
			&i.CreatedAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one

UPDATE "user"
set name = $2,
    payment_number = $3, payment_info = $4, address = $5, phone = $6, email = $7, type_user = $8, password = $9, payment = $10
WHERE id = $1 RETURNING id, name, address, phone, email, type_user, password, payment, payment_info, payment_number, created_at, update_at
`

type UpdateUserParams struct {
	ID            uuid.UUID      `json:"id"`
	Name          sql.NullString `json:"name"`
	PaymentNumber sql.NullString `json:"payment_number"`
	PaymentInfo   sql.NullString `json:"payment_info"`
	Address       sql.NullString `json:"address"`
	Phone         sql.NullString `json:"phone"`
	Email         string         `json:"email"`
	TypeUser      Type           `json:"type_user"`
	Password      string         `json:"password"`
	Payment       sql.NullString `json:"payment"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.PaymentNumber,
		arg.PaymentInfo,
		arg.Address,
		arg.Phone,
		arg.Email,
		arg.TypeUser,
		arg.Password,
		arg.Payment,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Phone,
		&i.Email,
		&i.TypeUser,
		&i.Password,
		&i.Payment,
		&i.PaymentInfo,
		&i.PaymentNumber,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}
