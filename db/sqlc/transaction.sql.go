// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: transaction.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one

INSERT INTO "transaction" (id_user,
                         status,
                         amount,
                         message)
VALUES ($1,
        $2,
        $3,
        $4) RETURNING id, id_user, status, amount, message, created_at, update_at
`

type CreateTransactionParams struct {
	IDUser  uuid.UUID      `json:"id_user"`
	Status  sql.NullInt32  `json:"status"`
	Amount  sql.NullInt64  `json:"amount"`
	Message sql.NullString `json:"message"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.IDUser,
		arg.Status,
		arg.Amount,
		arg.Message,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.IDUser,
		&i.Status,
		&i.Amount,
		&i.Message,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :one

DELETE
FROM "transaction"
WHERE id = $1 RETURNING id, id_user, status, amount, message, created_at, update_at
`

func (q *Queries) DeleteTransaction(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, deleteTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.IDUser,
		&i.Status,
		&i.Amount,
		&i.Message,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const getTransactionById = `-- name: GetTransactionById :one
SELECT id, id_user, status, amount, message, created_at, update_at FROM "transaction"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransactionById(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionById, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.IDUser,
		&i.Status,
		&i.Amount,
		&i.Message,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const listTransaction = `-- name: ListTransaction :many

SELECT id, id_user, status, amount, message, created_at, update_at
FROM "transaction"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTransactionParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransaction(ctx context.Context, arg ListTransactionParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransaction, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.IDUser,
			&i.Status,
			&i.Amount,
			&i.Message,
			&i.CreatedAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one

UPDATE "transaction"
set id_user = $2, status = $3, amount = $4, message = $5
WHERE id = $1 RETURNING id, id_user, status, amount, message, created_at, update_at
`

type UpdateTransactionParams struct {
	ID      uuid.UUID      `json:"id"`
	IDUser  uuid.UUID      `json:"id_user"`
	Status  sql.NullInt32  `json:"status"`
	Amount  sql.NullInt64  `json:"amount"`
	Message sql.NullString `json:"message"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, updateTransaction,
		arg.ID,
		arg.IDUser,
		arg.Status,
		arg.Amount,
		arg.Message,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.IDUser,
		&i.Status,
		&i.Amount,
		&i.Message,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}
