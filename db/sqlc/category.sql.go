// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: category.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :one

INSERT INTO category ( name, national)
VALUES ( $1,
         $2) RETURNING id, name, national, created_at, update_at
`

type CreateCategoryParams struct {
	Name     string         `json:"name"`
	National string `json:"national"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.Name, arg.National)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.National,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :one

DELETE
FROM category
WHERE id = $1 RETURNING id, name, national, created_at, update_at
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) (Category, error) {
	row := q.db.QueryRowContext(ctx, deleteCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.National,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const getAllCategory = `-- name: GetAllCategory :many
SELECT id, name, national, created_at, update_at
FROM category
ORDER BY id
`

func (q *Queries) GetAllCategory(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getAllCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.National,
			&i.CreatedAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryById = `-- name: GetCategoryById :one
SELECT id, name, national, created_at, update_at FROM category
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCategoryById(ctx context.Context, id uuid.UUID) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryById, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.National,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const listCategory = `-- name: ListCategory :many
SELECT id, name, national, created_at, update_at
FROM category
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCategoryParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCategory(ctx context.Context, arg ListCategoryParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategory, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.National,
			&i.CreatedAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one

UPDATE category
set name = $2,
    national = $3
WHERE id = $1 RETURNING id, name, national, created_at, update_at
`

type UpdateCategoryParams struct {
	ID       uuid.UUID      `json:"id"`
	Name     string         `json:"name"`
	National sql.NullString `json:"national"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, updateCategory, arg.ID, arg.Name, arg.National)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.National,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}
